import json
import logging
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from datetime import timedelta

import os
import subprocess
import random

from sql_interface import db_select, db_create_new_row, db_update, db_row_exists, db_select_column
from sql_interface import db_path

root_dir = os.environ["root_dir"]
photo_dir = f"{root_dir}bands_photos"
API_TOKEN = os.environ["API_TOKEN"]
WEBHOOK_PATH = ""
WEBHOOK_URL = subprocess.check_output("curl -s localhost:4040/api/tunnels | jq -r .tunnels[0].public_url",
                                      shell=True).decode('utf-8')[:-1]
WEBAPP_HOST = '127.0.0.1'
WEBAPP_PORT = 5000

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


def real_choice(l):
    random.shuffle(l)
    return l[random.randint(0, len(l)-1)]


lose_messages_1 = ["—É–≤—ã, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª((", "—Ç—ã –∑–∞–ª–∞–∂–∞–ª(", " –Ω–µ-–∞(( –±–ª–∏–∑–∫–æ, –Ω–æ"]
lose_messages_2 = [" —ç—Ç–æ –±—ã–ª <u>%s</u>", " –µ–≥–æ –∑–æ–≤—É—Ç <u>%s</u>", " –Ω–∞ —Ñ–æ—Ç–æ –±—ã–ª <u>%s</u>"]
win_messages = ["—É—Ä–∞!! —Ç—ã —É–≥–∞–¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–º–æ–ª–æ–¥–µ—Ü! —ç—Ç–æ –≤–µ—Ä–Ω–æ", "—É–≥–∞–¥–∞–ª! —Ç—ã –±—ã—Å—Ç—Ä–æ —É—á–∏—à—å—Å—è!",
                "–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –º–æ–∂–µ—à—å –¥–∞–∂–µ —Å—ä–µ—Å—Ç—å –∑–∞ —ç—Ç–æ –ø–µ—á–µ–Ω—å–∫—É"]
good_messages = ["—É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –Ω–µ –æ–ø—É—Å–∫–∞–π —Ä—É–∫–∏", "—Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, —è —ç—Ç–æ –∑–Ω–∞—é!", "—Ç—ã –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–π!"]

generate_win_message = lambda: real_choice(win_messages)
generate_lose_message = lambda name: real_choice(lose_messages_1) + real_choice(lose_messages_2) % name
generate_good_message = lambda: real_choice(good_messages)

str2button = lambda l: [KeyboardButton(x) for x in l]
nicknames = {"Stray Kids": "–±—Ä–æ–¥—è—á–∏–µ –¥–µ—Ç–∏",
             "Lee Know": "–º–∏–Ω—Ö–æ",
             "Han": "–¥–∂–∏—Å–æ–Ω",
             "I.N": "—á–æ–Ω–∏–Ω",
             "Felix": "—Ñ–µ–ª–∏–∫—Å",
             "Bang Chan": "—á–∞–Ω",
             "Hyunjin": "—Ö–µ–Ω–¥–∂–∏–Ω",
             "Seungmin": "—Å—ã–Ω–º–∏–Ω",
             "Changbin": "—á–∞–Ω–±–∏–Ω",
             "Jake": "–¥–∂–µ–π–∫",
             "Sunoo": "—Å–æ–Ω—É",
             "Ni-ki": "–Ω–∏–∫–∏",
             "Jay": "–¥–∂–µ–π",
             "Heeseung": "—Ö–∏—Å—ã–Ω",
             "Jungwon": "—á–æ–Ω–≤–æ–Ω",
             "Sunghoon": "—Å–æ–Ω—Ö—É–Ω",
             "Enhypen": "—ç–Ω—Ö–∞–π–ø–µ–Ω"}
band_nicknames = {"Stray Kids": "–±—Ä–æ–¥—è—á–∏–µ –¥–µ—Ç–∏",
                  "Enhypen": "—ç–Ω—Ö–∞–π–ø–µ–Ω"}


def map_name(name: str) -> str:
    if name in nicknames.keys():
        return nicknames[name]
    elif name in nicknames.values():
        return {v: k for k, v in nicknames.items()}[name]
    else:
        return "ERROR"


def map_list_of_names(list_of_names: list) -> list:
    return [map_name(name) for name in list_of_names]


bands = ["Stray Kids", "Enhypen"]
bands_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
    *str2button(map_list_of_names(bands))).add("üìà –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

band_members = {"stray_kids": ["Lee Know", "Han", "I.N", "Felix", "Bang Chan", "Hyunjin", "Seungmin", "Changbin"],
                "enhypen": ["Jake", "Sunoo", "Ni-ki", "Jay", "Heeseung", "Jungwon", "Sunghoon"]}


# states
class Form(StatesGroup):
    choose_band = State()
    learn = State()
    choose_guy = State()
    feedback = State()


def choose_member_and_create_keyboard(user_data):
    band = user_data["current_learning_band"]
    member = real_choice(band_members[band])

    mini_band = band_members[band][:]
    mini_band.remove(member)
    band_for_keyboard = list(random.sample(mini_band, 2))
    band_for_keyboard.append(member)
    random.shuffle(band_for_keyboard)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        *str2button(map_list_of_names(band_for_keyboard))).add(KeyboardButton("–≤—ã–π—Ç–∏"))

    return member, keyboard


def generate_statistics(user_id):
    statistics = "—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª: \n\n"

    for band in bands:
        members = "\n".join([f"‚òÜ{map_name(x[0])}: {x[1][1]} –∏–∑ {x[1][0]}"
                             if (round(x[1][1] * 0.4) >= x[1][0]-x[1][1]) and (x[1][0] >= 10)
                             else
                             f"{map_name(x[0])}: {x[1][1]} –∏–∑ {x[1][0]}"
                             for x in json.loads(db_select(user_id, band.lower().replace(" ", "_"))).items()])
        statistics += f"*{band}*\n{members}\n\n"

    statistics += "\n—Ç—ã —É–≤–∏–¥–∏—à—å –∫—Ä–∞—Å–∏–≤—É—é –∑–≤—ë–∑–¥–æ—á–∫—É ‚òÜ —Ä—è–¥–æ–º —Å —Ö–æ—Ä–æ—à–æ –∑–∞–ø–æ–º–Ω–∏–≤—à–∏–º—Å—è –º–∞–ª—å—á–∏–∫–∞–º–∏!"
    return statistics


@dp.message_handler(state=None)
async def start(message: types.Message):
    await Form.choose_band.set()
    await bot.send_message(message.chat.id, "–ø—Ä–∏–≤–µ—Ç–∏–∫! –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å?\n(—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–æ—á–∫–µ ¬´–º–µ–Ω—é¬ª,"
                                            " —Å–ª–µ–≤–∞ –æ—Ç –æ–∫–æ—à–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)", reply_markup=bands_keyboard, )
    if not db_row_exists(message.chat.id):
        name = "None" if not message.chat.first_name else message.chat.first_name
        username = "None" if not message.chat.username else message.chat.username

        db_create_new_row(message.chat.id, name, username)


@dp.message_handler(commands=['feel_better'], state="*")
async def get_statistics(message: types.Message):
    if message.chat.id == 186167695:
        with open(db_path, 'rb') as file:
            await bot.send_document(message.chat.id, ('db.sqlite', file))
            names = db_select_column("user_name")
            usernames = db_select_column("user_username")
            data = db_select_column("last_data")
            users = "\n".join([f"{x[0][0]} ‚Äì @{x[1][0]} {x[2][0]}" if x[1][0] != "None"
                               else f"{x[0][0]} ‚Äì no username {x[2][0]}"
                               for x in list(zip(names, usernames, data))])
            await bot.send_message(message.chat.id, users)
    else:
        reply = generate_good_message()
        path = f'{photo_dir}/cats/other'
        filename = real_choice(os.listdir(path))
        with open(f"{path}/{filename}", 'rb') as photo:
            await message.answer_photo(photo, caption=reply)


@dp.message_handler(commands=['spasibo'], state=Form.choose_band)
async def get_statistics(message: types.Message):
    await Form.feedback.set()
    await bot.send_message(message.chat.id, "–º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É —Å–ø–∞—Å–∏–±–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ"
                                            "(—Ç–æ–ª—å–∫–æ –º–∏–ª–æ–µ!!)\n\n–µ—Å–ª–∏ —Ç—ã –∑–ª–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–∂–∏–º–∞–π /exit")


@dp.message_handler(state=Form.feedback)
async def feedback(message: types.Message):
    if message.text == "/exit":
        await bot.send_message(message.chat.id, "–Ω–∏—á–µ–≥–æ! –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å")
    else:
        await bot.send_message(message.chat.id, "–ø–µ—Ä–µ—Å–ª–∞–ª –∞–≤—Ç–æ—Ä—É\n\n–Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª(–Ω–µ —Å–º–æ—Ç—Ä—é,"
                                                " —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å) –Ω–æ –¥–∞–∂–µ –º–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
        await bot.send_message(186167695, f"–ø—Ä–∏—à–µ–ª —Ñ–∏–¥–±–µ–∫\n\n{message.text}")

    await bot.send_message(message.chat.id, f"–∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—É—á–∏—Ç—å?", reply_markup=bands_keyboard)
    await Form.choose_band.set()


@dp.message_handler(state=Form.choose_band)
async def choose_band(message: types.Message, state: FSMContext):
    if message.text == "üìà –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await bot.send_message(message.chat.id, generate_statistics(message.chat.id), reply_markup=bands_keyboard,
                               parse_mode="markdown")
        await bot.send_message(message.chat.id, "–∞ —Ç–µ–ø–µ—Ä—å –∑–∞ —Ä–∞–±–æ—Ç—É! —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞\n(—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏"
                                                " –ø–æ –∫–Ω–æ–ø–æ—á–∫–µ ¬´–º–µ–Ω—é¬ª, —Å–ª–µ–≤–∞ –æ—Ç –æ–∫–æ—à–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)",
                               reply_markup=bands_keyboard)
    elif message.text not in band_nicknames.values():
        await bot.send_message(message.chat.id, "—è —Ç–∞–∫–∏—Ö –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é(( —Ç–æ–ª—å–∫–æ —ç—Ç–∏—Ö", reply_markup=bands_keyboard)
    else:
        await bot.send_message(message.chat.id, "—Å–µ–π—á–∞—Å –≤—Å—ë –º–∏–≥–æ–º –≤—ã—É—á–∏—à—å!")
        await state.update_data(current_learning_band=map_name(message.text).lower().replace(" ", "_"))
        user_data = await state.get_data()

        #   choose member to learn and create keyboard
        member, keyboard = choose_member_and_create_keyboard(user_data)
        await state.update_data(current_learning_member=member)
        await state.update_data(keyboard=keyboard)

        #   send photo
        path = f'{photo_dir}/{user_data["current_learning_band"]}/{member.lower().replace(" ", "_")}'
        filename = real_choice(os.listdir(path))
        with open(f"{path}/{filename}", 'rb') as photo:
            await message.answer_photo(photo, caption='–∫–∞–∫ —Ç—ã –¥—É–º–∞—à—å, –∫—Ç–æ —ç—Ç–æ?', reply_markup=keyboard)

        await Form.choose_guy.set()


@dp.message_handler(state=Form.choose_guy)
async def start(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    chosen_member = message.text

    keyboard = user_data["keyboard"]
    member = user_data["current_learning_member"]
    band = user_data["current_learning_band"]

    if message.text == "/spasibo":
        await bot.send_message(message.chat.id, f"—á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ –∞–≤—Ç–æ—Ä—É, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫—Ç–æ–ø–æ—á–∫—É –≤—ã–π—Ç–∏."
                                                f" –∞ –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π —É–≥–∞–¥—ã–≤–∞—Ç—å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –≤—ã—à–µ", reply_markup=keyboard)

    #   exit to choose band
    elif message.text == '–≤—ã–π—Ç–∏':
        await bot.send_message(message.chat.id, "–æ–∫–µ–π, –¥–∞–≤–∞–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥—Ä—É–≥–∏—Ö!", reply_markup=bands_keyboard)
        await Form.choose_band.set()

    #   shit filter
    elif chosen_member not in nicknames.values():
        await bot.send_message(message.chat.id, f"—Ç—ã —Å—Ç—Ä–∞–Ω–Ω—ã–π(", reply_markup=keyboard)

    #   OK
    else:
        #   win. correct!
        if chosen_member == map_name(member):
            await bot.send_message(message.chat.id, generate_win_message())
            win = True

        #   lose. incorrect
        else:
            await bot.send_message(message.chat.id, generate_lose_message(map_name(member)), parse_mode='html')
            win = False

        old_user_data = json.loads(db_select(message.chat.id, band))
        old_user_data[member][0] += 1
        if win:
            old_user_data[member][1] += 1
        db_update(message.chat.id, band, json.dumps(old_user_data),
                  message.date + timedelta(hours=3))

        member, keyboard = choose_member_and_create_keyboard(user_data)
        await state.update_data(current_learning_member=member)
        await state.update_data(keyboard=keyboard)

        path = f'{photo_dir}/{user_data["current_learning_band"]}/{member.lower().replace(" ", "_")}'
        filename = real_choice(os.listdir(path))
        with open(f"{path}/{filename}", 'rb') as photo:
            await message.answer_photo(photo, caption='–∫–∞–∫ —Ç—ã –¥—É–º–∞—à—å, –∫—Ç–æ —ç—Ç–æ?', reply_markup=keyboard)

        await Form.choose_guy.set()
    return


async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    # insert code here to run it after start


async def on_shutdown(dp):
    logging.warning('Shutting down ..')
    # insert code here to run it before shutdown
    # Remove webhook(not acceptable in some cases)
    await bot.delete_webhook()
    # Close DB connection(if used)
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning('Bye!')


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
